disn                   package:FOO                   R Documentation

~~_f_u_n_c_t_i_o_n _t_o _d_o ... ~~

_D_e_s_c_r_i_p_t_i_o_n:

     ~~ A concise (1-5 lines) description of what the function does. ~~

_U_s_a_g_e:

     disn(theta, data, partition, null)

_A_r_g_u_m_e_n_t_s:

   theta: ~~Describe `theta' here~~ 

    data: ~~Describe `data' here~~ 

partition: ~~Describe `partition' here~~ 

    null: ~~Describe `null' here~~ 

_D_e_t_a_i_l_s:

     ~~ If necessary, more details than the __description__  above ~~

_V_a_l_u_e:

     ~Describe the value returned If it is a LIST, use 

  comp1 : Description of `comp1'

  comp2 : Description of `comp2'

     ...

_W_A_R_N_I_N_G:

     ....

_N_o_t_e:

     ~~further notes~~

_A_u_t_h_o_r(_s):

     ~~who you are~~

_R_e_f_e_r_e_n_c_e_s:

     ~put references to the literature/web site here ~

_S_e_e _A_l_s_o:

     ~~objects to SEE ALSO as `~~fun~~', ~~~

_E_x_a_m_p_l_e_s:

     ##---- Should be DIRECTLY executable !! ----
     ##-- ==>  Define data, use random,
     ##--         or do  help(data=index)  for the standard data sets.

     ## The function is currently defined as
     function(theta,data,partition,null)
     {
      #######################################################################
      #
      # Calculate the log joint probability density of 
      # aberrations in the Instability-Selection-Network model
      #
      # theta = (alpha, beta)  in (0,1)^2
      # data = ntumor x nswitch matrix of binaries 0/1 indicating abnormality
      # partition = nswitch vector holding distinct path labels
      # null = logical vector indicating null switches
      #        (note this is slightly different than the null label in risn.R)
      #
      #######################################################################

       alpha <- theta[1]; beta <- theta[2]
       gamma <- 0

       # First get the prior part of the log density
       s0 <- sum( data==0 );  s1 <- sum( data==1 )
       logprob <- s0*log( 1-alpha ) + s1*log( alpha ) 

       # In case all switches are in the null path we're done; otherwise
       if( !( all( null ) ) )
        {
         #  Now compute the remaining sufficient statistics. 
         #  i.e., for each path j, in each tumor i, we need S_ij, the
         #  number of non-defects.
         #  To do so create an incidence matrix nswitch x npath 
         #  indicating the path label of each switch.
         apart <- partition[!null]    # active partition
         adat <-  data[,!null]        # active data
         incidence <- outer( apart, unique(apart), "==" )
         npath <- ncol(incidence)
         stats <- (1-adat) 
         # Now compute the numerator of the log-density
         one <- matrix(1,npath,1)
         tmp <- c( log( 1-beta^stats ) 
         numer <- 1 - (1-gamma)*exp(tmp)
         # Compute the denominator (same for all tumors)
         # First get the path lengths
         plen <- rep(1,sum(!null)) 
         denom <- 1-(1-gamma)*prod( 1-(1-(1-alpha)*(1-beta) )^plen  )
         # Put it all together
         logprob <- logprob + sum( log(numer) - log( denom ) )
        }
       return(  logprob )
      }

